package gui;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.List;
import javax.swing.Icon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import logica.Tarea;

public class Principal extends javax.swing.JFrame {
    //iconos
    private static Icon logout_JOP_icon = recursos.iconos.IconGetter.logout_JOP_icon;
    private static Icon delete_account_JOP_icon = recursos.iconos.IconGetter.delete_account_JOP_icon;
    private static Icon delete_task_JOP_icon = recursos.iconos.IconGetter.delete_task_JOP_icon;
    private static Icon nuevo_JOP_icon = recursos.iconos.IconGetter.nuevo_JOP_icon;
    private static Icon pendiente_JOP_icon = recursos.iconos.IconGetter.pendiente_JOP_icon;
    private static Icon finalizado_JOP_icon = recursos.iconos.IconGetter.finalizado_JOP_icon;
    
    private logica.Usuario usuarioActual = logica.UsuarioService.obtenerUsuarioPorUsername(logica.Main.USUARIO_ACTUAL);
    private logica.Tarea tareaSeleccionada = null;
    
    public Principal() {
        initComponents();
        setLocationRelativeTo(null);
        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/clipboard_JOP.png")).getImage());
        cerrarVentana();
        
        // Mostrar mensaje de bienvenida después de que la ventana sea visible
        SwingUtilities.invokeLater(() -> mostrarMensajeBienvenida());
        
        updateVentanaPrincipal();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        escritorio = new javax.swing.JDesktopPane();
        splitPane_tareas = new javax.swing.JSplitPane();
        sp_table_tareas = new javax.swing.JScrollPane();
        table_tareas = new javax.swing.JTable();
        p_detalles_tarea = new javax.swing.JPanel();
        lbl_titulo = new javax.swing.JLabel();
        btn_ver_mas = new javax.swing.JButton();
        sp_descr = new javax.swing.JScrollPane();
        txt_descr = new javax.swing.JTextArea();
        menubar_principal = new javax.swing.JMenuBar();
        menu_usuario = new javax.swing.JMenu();
        menu_opc_cerrar_sesion = new javax.swing.JMenuItem();
        menu_opc_modificar_cuenta = new javax.swing.JMenuItem();
        menu_opc_eliminar_cuenta = new javax.swing.JMenuItem();
        menu_tareas = new javax.swing.JMenu();
        menu_opc_crear_tarea = new javax.swing.JMenuItem();
        menu_opc_editar_tarea = new javax.swing.JMenuItem();
        menu_opc_eliminar_tarea = new javax.swing.JMenuItem();
        tarea_menu_separator = new javax.swing.JPopupMenu.Separator();
        submenu_filtrar_tareas = new javax.swing.JMenu();
        menu_opc_filtrar_nuevo = new javax.swing.JCheckBoxMenuItem();
        menu_opc_filtrar_pendiente = new javax.swing.JCheckBoxMenuItem();
        menu_opc_filtrar_finalizado = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Gestion De Tareas");
        setBackground(new java.awt.Color(230, 247, 245));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        escritorio.setBackground(new java.awt.Color(230, 247, 245));
        escritorio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                escritorioMouseClicked(evt);
            }
        });

        splitPane_tareas.setBackground(new java.awt.Color(230, 247, 245));
        splitPane_tareas.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        splitPane_tareas.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                splitPane_tareasComponentResized(evt);
            }
        });
        splitPane_tareas.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                splitPane_tareasPropertyChange(evt);
            }
        });

        sp_table_tareas.setBackground(new java.awt.Color(230, 247, 245));
        sp_table_tareas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        sp_table_tareas.setMinimumSize(new java.awt.Dimension(275, 565));

        table_tareas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        table_tareas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Título", "Descripción", "Estado", "Entrega"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_tareas.setMinimumSize(new java.awt.Dimension(275, 565));
        table_tareas.getTableHeader().setReorderingAllowed(false);
        table_tareas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_tareasMouseClicked(evt);
            }
        });
        sp_table_tareas.setViewportView(table_tareas);
        if (table_tareas.getColumnModel().getColumnCount() > 0) {
            table_tareas.getColumnModel().getColumn(0).setResizable(false);
            table_tareas.getColumnModel().getColumn(1).setResizable(false);
            table_tareas.getColumnModel().getColumn(2).setResizable(false);
            table_tareas.getColumnModel().getColumn(3).setResizable(false);
            table_tareas.getColumnModel().getColumn(4).setResizable(false);
        }

        splitPane_tareas.setRightComponent(sp_table_tareas);

        p_detalles_tarea.setBackground(new java.awt.Color(230, 247, 245));
        p_detalles_tarea.setToolTipText("Detalles de la tarea");
        p_detalles_tarea.setMinimumSize(new java.awt.Dimension(275, 100));

        lbl_titulo.setBackground(new java.awt.Color(230, 247, 245));
        lbl_titulo.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        lbl_titulo.setText("Título");

        btn_ver_mas.setBackground(new java.awt.Color(230, 247, 245));
        btn_ver_mas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/more_JOP.png"))); // NOI18N
        btn_ver_mas.setToolTipText("Ver más");
        btn_ver_mas.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btn_ver_mas.setBorderPainted(false);
        btn_ver_mas.setContentAreaFilled(false);
        btn_ver_mas.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btn_ver_mas.setFocusPainted(false);
        btn_ver_mas.setFocusable(false);
        btn_ver_mas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btn_ver_mas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ver_masActionPerformed(evt);
            }
        });

        sp_descr.setBackground(new java.awt.Color(230, 247, 245));
        sp_descr.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        txt_descr.setEditable(false);
        txt_descr.setBackground(new java.awt.Color(230, 247, 245));
        txt_descr.setColumns(20);
        txt_descr.setLineWrap(true);
        txt_descr.setRows(5);
        txt_descr.setText("Descripción");
        txt_descr.setWrapStyleWord(true);
        txt_descr.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        txt_descr.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        sp_descr.setViewportView(txt_descr);

        javax.swing.GroupLayout p_detalles_tareaLayout = new javax.swing.GroupLayout(p_detalles_tarea);
        p_detalles_tarea.setLayout(p_detalles_tareaLayout);
        p_detalles_tareaLayout.setHorizontalGroup(
            p_detalles_tareaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p_detalles_tareaLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(p_detalles_tareaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sp_descr, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                    .addGroup(p_detalles_tareaLayout.createSequentialGroup()
                        .addComponent(lbl_titulo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_ver_mas)))
                .addGap(10, 10, 10))
        );
        p_detalles_tareaLayout.setVerticalGroup(
            p_detalles_tareaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p_detalles_tareaLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(p_detalles_tareaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbl_titulo)
                    .addComponent(btn_ver_mas))
                .addGap(15, 15, 15)
                .addComponent(sp_descr, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                .addContainerGap())
        );

        splitPane_tareas.setLeftComponent(p_detalles_tarea);

        escritorio.setLayer(splitPane_tareas, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(escritorioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(splitPane_tareas, javax.swing.GroupLayout.DEFAULT_SIZE, 788, Short.MAX_VALUE)
                .addContainerGap())
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(escritorioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(splitPane_tareas)
                .addContainerGap())
        );

        menubar_principal.setBackground(new java.awt.Color(204, 204, 255));
        menubar_principal.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        menubar_principal.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        menu_usuario.setBackground(new java.awt.Color(242, 242, 242));
        menu_usuario.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        menu_usuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/account_settings_JOP.png"))); // NOI18N
        menu_usuario.setText("Usuario");
        menu_usuario.setToolTipText("Gestiona tu cuenta");
        menu_usuario.setBorderPainted(false);
        menu_usuario.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        menu_usuario.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        menu_opc_cerrar_sesion.setBackground(new java.awt.Color(242, 242, 242));
        menu_opc_cerrar_sesion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/logout_menu.png"))); // NOI18N
        menu_opc_cerrar_sesion.setText("Cerrar sesión");
        menu_opc_cerrar_sesion.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        menu_opc_cerrar_sesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_opc_cerrar_sesionActionPerformed(evt);
            }
        });
        menu_usuario.add(menu_opc_cerrar_sesion);

        menu_opc_modificar_cuenta.setBackground(new java.awt.Color(242, 242, 242));
        menu_opc_modificar_cuenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/modify_user_menu.png"))); // NOI18N
        menu_opc_modificar_cuenta.setText("Modificar cuenta");
        menu_opc_modificar_cuenta.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        menu_opc_modificar_cuenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_opc_modificar_cuentaActionPerformed(evt);
            }
        });
        menu_usuario.add(menu_opc_modificar_cuenta);

        menu_opc_eliminar_cuenta.setBackground(new java.awt.Color(242, 242, 242));
        menu_opc_eliminar_cuenta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/delete_account_menu.png"))); // NOI18N
        menu_opc_eliminar_cuenta.setText("Eliminar cuenta");
        menu_opc_eliminar_cuenta.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        menu_opc_eliminar_cuenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_opc_eliminar_cuentaActionPerformed(evt);
            }
        });
        menu_usuario.add(menu_opc_eliminar_cuenta);

        menubar_principal.add(menu_usuario);

        menu_tareas.setBackground(new java.awt.Color(242, 242, 242));
        menu_tareas.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        menu_tareas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/clipboard_JOP.png"))); // NOI18N
        menu_tareas.setText("Tareas");
        menu_tareas.setToolTipText("Gestiona tus tareas");
        menu_tareas.setBorderPainted(false);
        menu_tareas.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        menu_tareas.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        menu_opc_crear_tarea.setBackground(new java.awt.Color(242, 242, 242));
        menu_opc_crear_tarea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/new_task_menu.png"))); // NOI18N
        menu_opc_crear_tarea.setText("Nueva Tarea");
        menu_opc_crear_tarea.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        menu_opc_crear_tarea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_opc_crear_tareaActionPerformed(evt);
            }
        });
        menu_tareas.add(menu_opc_crear_tarea);

        menu_opc_editar_tarea.setBackground(new java.awt.Color(242, 242, 242));
        menu_opc_editar_tarea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/edit_task_menu.png"))); // NOI18N
        menu_opc_editar_tarea.setText("Editar Tarea");
        menu_opc_editar_tarea.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        menu_opc_editar_tarea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_opc_editar_tareaActionPerformed(evt);
            }
        });
        menu_tareas.add(menu_opc_editar_tarea);

        menu_opc_eliminar_tarea.setBackground(new java.awt.Color(242, 242, 242));
        menu_opc_eliminar_tarea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/delete_task_menu.png"))); // NOI18N
        menu_opc_eliminar_tarea.setText("Eliminar Tarea");
        menu_opc_eliminar_tarea.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        menu_opc_eliminar_tarea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_opc_eliminar_tareaActionPerformed(evt);
            }
        });
        menu_tareas.add(menu_opc_eliminar_tarea);

        tarea_menu_separator.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        menu_tareas.add(tarea_menu_separator);

        submenu_filtrar_tareas.setBackground(new java.awt.Color(242, 242, 242));
        submenu_filtrar_tareas.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        submenu_filtrar_tareas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/iconos/mostrar_tareas_menu.png"))); // NOI18N
        submenu_filtrar_tareas.setText("Mostrar");
        submenu_filtrar_tareas.setBorderPainted(false);

        menu_opc_filtrar_nuevo.setBackground(new java.awt.Color(242, 242, 242));
        menu_opc_filtrar_nuevo.setSelected(true);
        menu_opc_filtrar_nuevo.setText("Nuevas");
        menu_opc_filtrar_nuevo.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        menu_opc_filtrar_nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_opc_filtrar_nuevoActionPerformed(evt);
            }
        });
        submenu_filtrar_tareas.add(menu_opc_filtrar_nuevo);

        menu_opc_filtrar_pendiente.setBackground(new java.awt.Color(242, 242, 242));
        menu_opc_filtrar_pendiente.setSelected(true);
        menu_opc_filtrar_pendiente.setText("Pendientes");
        menu_opc_filtrar_pendiente.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        menu_opc_filtrar_pendiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_opc_filtrar_pendienteActionPerformed(evt);
            }
        });
        submenu_filtrar_tareas.add(menu_opc_filtrar_pendiente);

        menu_opc_filtrar_finalizado.setBackground(new java.awt.Color(242, 242, 242));
        menu_opc_filtrar_finalizado.setSelected(true);
        menu_opc_filtrar_finalizado.setText("Finalizado");
        menu_opc_filtrar_finalizado.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        menu_opc_filtrar_finalizado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_opc_filtrar_finalizadoActionPerformed(evt);
            }
        });
        submenu_filtrar_tareas.add(menu_opc_filtrar_finalizado);

        menu_tareas.add(submenu_filtrar_tareas);

        menubar_principal.add(menu_tareas);

        setJMenuBar(menubar_principal);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(escritorio)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(escritorio)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menu_opc_editar_tareaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_opc_editar_tareaActionPerformed
        abrirEditarTarea(tareaSeleccionada);
    }//GEN-LAST:event_menu_opc_editar_tareaActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        //cerrarVentana();
    }//GEN-LAST:event_formWindowClosing

    private void menu_opc_cerrar_sesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_opc_cerrar_sesionActionPerformed
        confirmarCierreSesion();
    }//GEN-LAST:event_menu_opc_cerrar_sesionActionPerformed

    private void menu_opc_modificar_cuentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_opc_modificar_cuentaActionPerformed
        ModificarUsuario modificarUsuario = new ModificarUsuario(this, true);
        modificarUsuario.setVisible(true);
        updateMenuBar();
    }//GEN-LAST:event_menu_opc_modificar_cuentaActionPerformed

    private void menu_opc_eliminar_cuentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_opc_eliminar_cuentaActionPerformed
        int opcion = JOptionPane.showConfirmDialog(this,
                "¿Estás seguro de que quieres eliminar tu cuenta? Esta acción no se puede deshacer.",
                "Eliminar cuenta",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE,
                delete_account_JOP_icon);

        if (opcion == JOptionPane.YES_OPTION) {
            if (eliminarCuenta()) {
                JOptionPane.showMessageDialog(this,
                        "Tu cuenta ha sido eliminada.\nLamentamos que te vayas.",
                        "Cuenta eliminada",
                        JOptionPane.INFORMATION_MESSAGE,
                        delete_account_JOP_icon);
                cerrarSesion();
            } else {
                JOptionPane.showMessageDialog(this,
                        "No se pudo eliminar la cuenta. Por favor, intenta de nuevo más tarde.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE,
                        delete_account_JOP_icon);
            }
        }
    }//GEN-LAST:event_menu_opc_eliminar_cuentaActionPerformed

    private void table_tareasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_tareasMouseClicked
        if (evt.getClickCount() == 1) {
            int filaSeleccionada = table_tareas.getSelectedRow();
            if (filaSeleccionada != -1) {
                // Obtener la tarea seleccionada desde la tabla
                int tareaId = (int) table_tareas.getValueAt(filaSeleccionada, 0);
                this.tareaSeleccionada = logica.TareaService.obtenerTareaPorId(tareaId);

                updateDetallesTarea(tareaSeleccionada);
                
                updateVentanaPrincipal();
            }
        } else if (evt.getClickCount() == 2 && tareaSeleccionada != null) {
            abrirDetallesDeTarea(tareaSeleccionada);
        }
    }//GEN-LAST:event_table_tareasMouseClicked

    private void splitPane_tareasComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_splitPane_tareasComponentResized
        //updateTituloDetallesTarea(tareaSeleccionada);
    }//GEN-LAST:event_splitPane_tareasComponentResized

    private void splitPane_tareasPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_splitPane_tareasPropertyChange
        updateTituloDetallesTarea(tareaSeleccionada);
    }//GEN-LAST:event_splitPane_tareasPropertyChange

    private void btn_ver_masActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ver_masActionPerformed
        abrirDetallesDeTarea(tareaSeleccionada);
    }//GEN-LAST:event_btn_ver_masActionPerformed

    private void escritorioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_escritorioMouseClicked
        this.tareaSeleccionada = null;
        updateVentanaPrincipal();
    }//GEN-LAST:event_escritorioMouseClicked

    private void menu_opc_crear_tareaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_opc_crear_tareaActionPerformed
        abrirCrearTarea();
    }//GEN-LAST:event_menu_opc_crear_tareaActionPerformed

    private void menu_opc_eliminar_tareaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_opc_eliminar_tareaActionPerformed
        eliminarTarea(tareaSeleccionada);
    }//GEN-LAST:event_menu_opc_eliminar_tareaActionPerformed

    private void menu_opc_filtrar_nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_opc_filtrar_nuevoActionPerformed
        updateTabletareas();
    }//GEN-LAST:event_menu_opc_filtrar_nuevoActionPerformed

    private void menu_opc_filtrar_pendienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_opc_filtrar_pendienteActionPerformed
        updateTabletareas();
    }//GEN-LAST:event_menu_opc_filtrar_pendienteActionPerformed

    private void menu_opc_filtrar_finalizadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_opc_filtrar_finalizadoActionPerformed
        updateTabletareas();
    }//GEN-LAST:event_menu_opc_filtrar_finalizadoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_ver_mas;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JLabel lbl_titulo;
    private javax.swing.JMenuItem menu_opc_cerrar_sesion;
    private javax.swing.JMenuItem menu_opc_crear_tarea;
    private javax.swing.JMenuItem menu_opc_editar_tarea;
    private javax.swing.JMenuItem menu_opc_eliminar_cuenta;
    private javax.swing.JMenuItem menu_opc_eliminar_tarea;
    private javax.swing.JCheckBoxMenuItem menu_opc_filtrar_finalizado;
    private javax.swing.JCheckBoxMenuItem menu_opc_filtrar_nuevo;
    private javax.swing.JCheckBoxMenuItem menu_opc_filtrar_pendiente;
    private javax.swing.JMenuItem menu_opc_modificar_cuenta;
    private javax.swing.JMenu menu_tareas;
    private javax.swing.JMenu menu_usuario;
    private javax.swing.JMenuBar menubar_principal;
    private javax.swing.JPanel p_detalles_tarea;
    private javax.swing.JScrollPane sp_descr;
    private javax.swing.JScrollPane sp_table_tareas;
    private javax.swing.JSplitPane splitPane_tareas;
    private javax.swing.JMenu submenu_filtrar_tareas;
    private javax.swing.JTable table_tareas;
    private javax.swing.JPopupMenu.Separator tarea_menu_separator;
    private javax.swing.JTextArea txt_descr;
    // End of variables declaration//GEN-END:variables
    private void cerrarVentana() {
        try {
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            // Agregar el listener para el evento de cierre de ventana
            addWindowListener(new WindowAdapter() {
                //@Override
                public void windowClosing(WindowEvent e) {
                    confirmarCierreSesion();
                }
            });
            this.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error al cerrar la ventana principal.\n" + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void mostrarMensajeBienvenida() {
        JOptionPane.showMessageDialog(null,
                "Bueno, a ponerse manos a la obra...\n¡Tú puedes!",
                "Bienvenido/a " + logica.Main.USUARIO_ACTUAL,
                JOptionPane.PLAIN_MESSAGE);
    }
    
    private void confirmarCierreSesion() {
        int opcion = JOptionPane.showConfirmDialog(this,
                "¿Estás seguro de que quieres cerrar sesión?",
                "Cerrar sesión",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                logout_JOP_icon);
        
        if (opcion == JOptionPane.YES_OPTION) {
            cerrarSesion();
        }
    }
    
    private void cerrarSesion() {
        logica.Main.USUARIO_ACTUAL = null;
        Login login = new Login();
        login.setVisible(true);
        this.dispose();
    }
    
    private boolean eliminarCuenta() {
        return logica.UsuarioService.eliminarUsuario(this.usuarioActual.getId());
    }

    private void updateVentanaPrincipal() {
        updateMenuBar();
        updateTabletareas();
        updateDetallesTarea(tareaSeleccionada);
        if (tareaSeleccionada != null) {
            btn_ver_mas.setEnabled(true);
            menu_opc_editar_tarea.setEnabled(true);
            menu_opc_eliminar_tarea.setEnabled(true);
        } else {
            btn_ver_mas.setEnabled(false);
            menu_opc_editar_tarea.setEnabled(false);
            menu_opc_eliminar_tarea.setEnabled(false);
        }
    }
    
    private void updateMenuBar() {
        menu_usuario.setText("Mi cuenta");
        this.usuarioActual = logica.UsuarioService.obtenerUsuarioPorUsername(logica.Main.USUARIO_ACTUAL);
    }

    private void updateTabletareas() {
        List<logica.Tarea> listaDeTareas = logica.TareaService.obtenerTareasPorUsuario(this.usuarioActual.getId());
        // Limpiar la tabla antes de actualizarla
        DefaultTableModel model = (DefaultTableModel) table_tareas.getModel();
        model.setRowCount(0); // Eliminar todas las filas previas

        // Filtrar las tareas según los JCheckBoxMenuItems
        boolean filtrarNuevo = menu_opc_filtrar_nuevo.isSelected();
        boolean filtrarPendiente = menu_opc_filtrar_pendiente.isSelected();
        boolean filtrarFinalizado = menu_opc_filtrar_finalizado.isSelected();

        for (logica.Tarea tarea : listaDeTareas) {
            // Comprobar si la tarea cumple con alguno de los filtros seleccionados
            boolean agregar = false;

            if (filtrarNuevo && tarea.getEstado().equals("Nuevo")) {
                agregar = true;
            } 
            if (filtrarPendiente && tarea.getEstado().equals("Pendiente")) {
                agregar = true;
            } 
            if (filtrarFinalizado && tarea.getEstado().equals("Finalizado")) {
                agregar = true;
            }

            // Añadir la tarea a la tabla si cumple con los filtros
            if (agregar) {
                Object[] rowData = {
                    tarea.getId(),
                    tarea.getTitulo(),
                    tarea.getDescripcion(),
                    tarea.getEstado(),
                    tarea.getFechaEntrega() // Omitimos fecha_creacion
                };
                model.addRow(rowData); // Añadir la fila al modelo de la tabla
            }
        }

        // ESTILO
        //aplicarEstiloTableTareas();
    }
    
    private void updateDetallesTarea(logica.Tarea tarea) {
        if (tarea == null) {
            lbl_titulo.setText("Título");
            txt_descr.setText("Descripción");
        } else {
            // Cargar los datos de la tarea seleccionada en los campos correspondientes
            updateTituloDetallesTarea(tarea);
            txt_descr.setText(tarea.getDescripcion());
        }
    }

    private void updateTituloDetallesTarea(logica.Tarea tarea) {
        if (tarea == null) {
            updateIconoEstado("None");
            return;
        }
        // Establecer el icono según el estado
        updateIconoEstado(tarea.getEstado());
        
        // Calcular el ancho disponible (ancho del panel menos ancho del botón y margen)
        int anchoPanel = p_detalles_tarea.getWidth();
        int anchoBoton = btn_ver_mas.getWidth();
        int margen = 60;
        int anchoMaximoDisponible = anchoPanel - anchoBoton - margen;
        
        // Obtener el FontMetrics del JLabel para calcular el ancho del texto
        java.awt.FontMetrics fontMetrics = lbl_titulo.getFontMetrics(lbl_titulo.getFont());
        
        lbl_titulo.setText(logica.Util.cortarTextoSiEsLargo(tarea.getTitulo(), anchoMaximoDisponible, fontMetrics));
    }
    
    private void updateIconoEstado(String estado) {
        switch(estado){
            case "Nuevo" -> {
                lbl_titulo.setIcon(nuevo_JOP_icon);  // Icono para el estado "Nuevo"
            }
            case "Pendiente" -> {
                lbl_titulo.setIcon(pendiente_JOP_icon);  // Icono para el estado "Pendiente"
            }
            case "Finalizado" -> {
                lbl_titulo.setIcon(finalizado_JOP_icon);  // Icono para el estado "Finalizado"
            }
            default -> {
                lbl_titulo.setIcon(null);  // Si el estado no coincide, se quita el icono o se usa uno por defecto
            }
        }
    }

    private void abrirDetallesDeTarea(logica.Tarea tareaSeleccionada) {
        DetallesDeTarea detalles_de_tarea = new DetallesDeTarea(this, true, tareaSeleccionada);
        detalles_de_tarea.setVisible(true);
    }

    private void abrirEditarTarea(Tarea tarea) {
        EditarTarea editarTarea = new EditarTarea(this, true, tarea);
        editarTarea.setVisible(true);
        updateTabletareas();
        this.tareaSeleccionada = null;
        updateDetallesTarea(this.tareaSeleccionada);
    }

    private void abrirCrearTarea() {
        CrearTarea crearTarea = new CrearTarea(this, true);
        crearTarea.setVisible(true);
        updateTabletareas();
    }

    private void eliminarTarea(Tarea tarea) {
        int opcion = JOptionPane.showConfirmDialog(this,
                "¿Estás seguro de que quieres eliminar tu tarea? Esta acción no se puede deshacer.",
                "Eliminar " + tarea.getTitulo(),
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE,
                delete_task_JOP_icon);
        
        if (opcion == JOptionPane.YES_OPTION) {
            if (logica.TareaService.eliminarTarea(tarea.getId())) {
                JOptionPane.showMessageDialog(this,
                        "Tu tarea ha sido eliminada.",
                        "Eliminar "+tarea.getTitulo(),
                        JOptionPane.INFORMATION_MESSAGE,
                        delete_task_JOP_icon);
            } else {
                JOptionPane.showMessageDialog(this,
                        "No se pudo eliminar la tarea. Por favor, intenta de nuevo más tarde.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE,
                        delete_task_JOP_icon);
            }
        }
        updateTabletareas();
    }
}
